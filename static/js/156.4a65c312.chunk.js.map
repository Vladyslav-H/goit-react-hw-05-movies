{"version":3,"file":"static/js/156.4a65c312.chunk.js","mappings":"sLAEaA,E,QAAYC,GAAAA,IAAH,8G,8GCATC,E,QAAOD,GAAAA,GAAH,iS,SC8BjB,EAzBkB,SAAC,GAAgB,IAAdE,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAOG,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACjB,OACE,SAACN,EAAD,WACE,UAAC,cAAD,CAAsBO,MAAO,CAAEC,MAAO,QAAtC,WACE,SAAC,MAAD,KACA,SAAC,KAAD,CAAMC,MAAOP,EAAUQ,GAAE,kBAAaL,GAAtC,SACGC,QAJID,EASd,KAGN,C,+LCxBYM,E,QAAQZ,GAAAA,GAAH,gD,mBCuClB,EA9BiB,WACf,OAAkCa,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAec,EAAf,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WAER,IAAMC,EAAY,mCAAG,2FACnBH,GAAa,GADM,mBAGEI,EAAAA,EAAAA,MAHF,OAGXC,EAHW,OAKjBJ,GAAU,OAAII,IALG,gDAOjBC,EAAAA,GAAAA,MAAY,kDAPK,yBASjBN,GAAa,GATI,4EAAH,qDAYlBG,GACD,GAAE,KAGD,UAAC,IAAD,YACE,SAAC,KAAD,CAAgBI,SAAS,aAAaC,MAAM,SAC3CT,IAAa,SAACU,EAAA,EAAD,IACbtB,EAAOuB,OAAS,IAAK,SAACb,EAAD,8BACtB,SAACc,EAAA,EAAD,CAAWxB,OAAQA,MAGxB,C,8LCtCDyB,EAAAA,EAAAA,SAAAA,QAAyB,+BAClB,IAAMC,EAAU,mCAEVT,EAAmB,WAC9B,OAAOQ,EAAAA,EAAAA,IAAA,sCAC+BC,IACnCC,MAAK,SAAAC,GAAQ,OAAIA,EAASV,KAAKW,OAAlB,GACjB,EAEYC,EAAiB,SAAAC,GAC5B,OAAON,EAAAA,EAAAA,IAAA,gCACyBC,GAAW,CACvCM,OAAQ,CACND,MAAAA,KAGHJ,MAAK,SAAAC,GAAQ,OAAIA,EAASV,KAAKW,OAAlB,GACjB,EAEYI,EAAe,SAAA7B,GAC1B,OAAOqB,EAAAA,EAAAA,IAAA,iBACUrB,EADV,oBACwBsB,IAC5BC,MAAK,SAAAC,GAAQ,OAAIA,EAASV,IAAb,GACjB,EAEYgB,EAAkB,SAAA9B,GAC7B,OAAOqB,EAAAA,EAAAA,IAAA,iBACUrB,EADV,4BACgCsB,IACpCC,MAAK,SAAAC,GAAQ,OAAIA,EAASV,KAAKiB,IAAlB,GACjB,EAEYC,EAAkB,SAAAhC,GAC7B,OAAOqB,EAAAA,EAAAA,IAAA,iBACUrB,EADV,4BACgCsB,IACpCC,MAAK,SAAAC,GAAQ,OAAIA,EAASV,KAAKW,OAAlB,GACjB,EAEYQ,EAAY,SAAAC,GACvB,OAAOb,EAAAA,EAAAA,IAAA,yCACkCa,IACtCX,MAAK,SAAAC,GAAQ,OAAIA,EAASW,OAAOC,GAApB,GACjB,C","sources":["components/Container/Container.styled.js","components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","pages/HomePage/HomePage.styled.js","pages/HomePage/HomePage.jsx","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 40px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n  gap: 5px;\n  color: yellow;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    scale: 1.05;\n  }\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { GiFilmProjector } from 'react-icons/gi';\nimport { IconContext } from 'react-icons';\nimport PropTypes from 'prop-types';\n\nimport { Item } from './MovieList.styled';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(({ id, title }) => {\n        return (\n          <Item key={id}>\n            <IconContext.Provider value={{ color: 'blue' }}>\n              <GiFilmProjector />\n              <Link state={location} to={`/movies/${id}`}>\n                {title}\n              </Link>\n            </IconContext.Provider>\n          </Item>\n        );\n      })}\n    </ul>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n\nexport default MovieList;\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  margin-bottom: 30px;\n`;\n","import { useEffect, useState } from 'react';\nimport Loader from 'components/Loader/Loader';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { getTrendingMovie } from 'services/moviesApi';\n\nimport MovieList from 'components/MovieList/MovieList';\nimport { Title } from './HomePage.styled';\nimport { Container } from 'components/Container/Container.styled';\n\nconst HomePage = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    \n    const setNewMovies = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getTrendingMovie();\n\n        setMovies([...data]);\n      } catch (error) {\n        toast.error('Ooops! Something went wrong. Please, try later');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    setNewMovies();\n  }, []);\n\n  return (\n    <Container>\n      <ToastContainer position=\"top-center\" theme=\"dark\" />\n      {isLoading && <Loader />}\n      {movies.length > 0 && <Title>Trending today</Title>}\n      <MovieList movies={movies} />\n    </Container>\n  );\n};\nexport default HomePage;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '6031aff1495aee0d83201b316a243945';\n\nexport const getTrendingMovie = () => {\n  return axios\n    .get(`/trending/movie/day?api_key=${API_KEY}`)\n    .then(response => response.data.results);\n};\n\nexport const getMovieByName = query => {\n  return axios\n    .get(`/search/movie?api_key=${API_KEY}`, {\n      params: {\n        query,\n      },\n    })\n    .then(response => response.data.results);\n};\n\nexport const getMovieById = id => {\n  return axios\n    .get(`/movie/${id}?api_key=${API_KEY}`)\n    .then(response => response.data);\n};\n\nexport const getMovieCredits = id => {\n  return axios\n    .get(`/movie/${id}/credits?api_key=${API_KEY}`)\n    .then(response => response.data.cast);\n};\n\nexport const getMovieReviews = id => {\n  return axios\n    .get(`/movie/${id}/reviews?api_key=${API_KEY}`)\n    .then(response => response.data.results);\n};\n\nexport const getPoster = path => {\n  return axios\n    .get(`https://image.tmdb.org/t/p/w300${path}`)\n    .then(response => response.config.url);\n};\n"],"names":["Container","styled","Item","movies","location","useLocation","map","id","title","value","color","state","to","Title","useState","isLoading","setIsLoading","setMovies","useEffect","setNewMovies","getTrendingMovie","data","toast","position","theme","Loader","length","MovieList","axios","API_KEY","then","response","results","getMovieByName","query","params","getMovieById","getMovieCredits","cast","getMovieReviews","getPoster","path","config","url"],"sourceRoot":""}
{"version":3,"file":"static/js/387.5b918b66.chunk.js","mappings":"8SAEaA,EAAOC,EAAAA,GAAAA,GAAH,mGAOJC,EAAOD,EAAAA,GAAAA,GAAH,gOAYJE,EAAaF,EAAAA,GAAAA,IAAH,iKASVG,EAAmBH,EAAAA,GAAAA,IAAH,6FAMhBI,EAAOJ,EAAAA,GAAAA,GAAH,oE,SC4BjB,EAxDa,WACX,OAAkCK,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA4BH,EAAAA,EAAAA,UAAS,IAArC,eAAOK,EAAP,KAAeC,EAAf,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,GAAKJ,EAAL,CAEA,IAAMK,EAAO,mCAAG,2FACdN,GAAa,GADC,mBAGOO,EAAAA,EAAAA,IAAgBN,GAHvB,OAGNO,EAHM,OAIZJ,EAAUI,GAJE,gDAMZC,EAAAA,GAAAA,MAAY,kDANA,yBAQZT,GAAa,GARD,4EAAH,qDAYbU,OAAOC,SAAS,EAAG,KACnBL,GAfoB,CAgBrB,GAAE,CAACL,KAGF,gCACGF,IAAa,SAACa,EAAA,EAAD,KACd,SAACpB,EAAD,UACGW,EAAOU,OAAS,EACfV,EAAOW,KAAI,YAAqD,IAAlDC,EAAiD,EAAjDA,GAAIC,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAC1C,OACE,UAACxB,EAAD,WACGwB,GACC,gBACEC,IAAG,0CAAqCD,GACxCE,IAAKF,KAGP,SAACvB,EAAD,+BAEF,UAACC,EAAD,YACE,UAACC,EAAD,eAAQoB,MACR,0CAFF,KAE2B,0BAAOD,SAXzBD,EAed,KAED,qFAGJ,SAAC,KAAD,MAGL,C,8LC7DDM,EAAAA,EAAAA,SAAAA,QAAyB,+BAClB,IAAMC,EAAU,mCAEVC,EAAmB,WAC9B,OAAOF,EAAAA,EAAAA,IAAA,sCAC+BC,IACnCE,MAAK,SAAAC,GAAQ,OAAIA,EAASjB,KAAKkB,OAAlB,GACjB,EAEYC,EAAiB,SAAAC,GAC5B,OAAOP,EAAAA,EAAAA,IAAA,gCACyBC,GAAW,CACvCO,OAAQ,CACND,MAAAA,KAGHJ,MAAK,SAAAC,GAAQ,OAAIA,EAASjB,KAAKkB,OAAlB,GACjB,EAEYI,EAAe,SAAAf,GAC1B,OAAOM,EAAAA,EAAAA,IAAA,iBACUN,EADV,oBACwBO,IAC5BE,MAAK,SAAAC,GAAQ,OAAIA,EAASjB,IAAb,GACjB,EAEYD,EAAkB,SAAAQ,GAC7B,OAAOM,EAAAA,EAAAA,IAAA,iBACUN,EADV,4BACgCO,IACpCE,MAAK,SAAAC,GAAQ,OAAIA,EAASjB,KAAKuB,IAAlB,GACjB,EAEYC,EAAkB,SAAAjB,GAC7B,OAAOM,EAAAA,EAAAA,IAAA,iBACUN,EADV,4BACgCO,IACpCE,MAAK,SAAAC,GAAQ,OAAIA,EAASjB,KAAKkB,OAAlB,GACjB,EAEYO,EAAY,SAAAC,GACvB,OAAOb,EAAAA,EAAAA,IAAA,yCACkCa,IACtCV,MAAK,SAAAC,GAAQ,OAAIA,EAASU,OAAOC,GAApB,GACjB,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n  padding: 40px 30px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  width: 200px;\n  height: 420px;\n  flex-direction: column;\n  gap: 15px;\n  flex-wrap: wrap;\n  align-items: center;\n\n  box-shadow: 3px 5px 24px -9px rgba(255, 255, 255, 0.75);\n`;\n\nexport const EmptyImage = styled.div`\n  width: 200px;\n  height: 300px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgrey;\n`;\n\nexport const DescriptionWrapp = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Name = styled.h2`\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n","import { useEffect, useState } from 'react';\nimport { getMovieCredits } from 'services/moviesApi';\nimport { Outlet, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport Loader from 'components/Loader/Loader';\n\nimport { List, Item, EmptyImage, DescriptionWrapp, Name } from './Cast.styled';\n\nconst Cast = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  const [credit, setCredit] = useState([]);\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const getCast = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getMovieCredits(movieId);\n        setCredit(data);\n      } catch (error) {\n        toast.error('Ooops! Something went wrong. Please, try later');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    window.scrollBy(0, 450);\n    getCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <List>\n        {credit.length > 0 ? (\n          credit.map(({ id, character, original_name, profile_path }) => {\n            return (\n              <Item key={id}>\n                {profile_path ? (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w200/${profile_path}`}\n                    alt={profile_path}\n                  />\n                ) : (\n                  <EmptyImage>Image not found</EmptyImage>\n                )}\n                <DescriptionWrapp>\n                  <Name> {original_name}</Name>\n                  <span> Character:</span> <span>{character}</span>\n                </DescriptionWrapp>\n              </Item>\n            );\n          })\n        ) : (\n          <h2>Sorry, we don't have any information about the actors</h2>\n        )}\n      </List>\n      <Outlet />\n    </>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '6031aff1495aee0d83201b316a243945';\n\nexport const getTrendingMovie = () => {\n  return axios\n    .get(`/trending/movie/day?api_key=${API_KEY}`)\n    .then(response => response.data.results);\n};\n\nexport const getMovieByName = query => {\n  return axios\n    .get(`/search/movie?api_key=${API_KEY}`, {\n      params: {\n        query,\n      },\n    })\n    .then(response => response.data.results);\n};\n\nexport const getMovieById = id => {\n  return axios\n    .get(`/movie/${id}?api_key=${API_KEY}`)\n    .then(response => response.data);\n};\n\nexport const getMovieCredits = id => {\n  return axios\n    .get(`/movie/${id}/credits?api_key=${API_KEY}`)\n    .then(response => response.data.cast);\n};\n\nexport const getMovieReviews = id => {\n  return axios\n    .get(`/movie/${id}/reviews?api_key=${API_KEY}`)\n    .then(response => response.data.results);\n};\n\nexport const getPoster = path => {\n  return axios\n    .get(`https://image.tmdb.org/t/p/w300${path}`)\n    .then(response => response.config.url);\n};\n"],"names":["List","styled","Item","EmptyImage","DescriptionWrapp","Name","useState","isLoading","setIsLoading","movieId","useParams","credit","setCredit","useEffect","getCast","getMovieCredits","data","toast","window","scrollBy","Loader","length","map","id","character","original_name","profile_path","src","alt","axios","API_KEY","getTrendingMovie","then","response","results","getMovieByName","query","params","getMovieById","cast","getMovieReviews","getPoster","path","config","url"],"sourceRoot":""}